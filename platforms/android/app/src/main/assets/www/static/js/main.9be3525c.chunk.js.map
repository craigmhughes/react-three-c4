{"version":3,"sources":["components/3d/GameBoard.js","components/Counter.js","components/3d/Clouds.js","components/Board.js","components/Interface.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["GameBoard","useState","model","setModel","newMaterial","THREE","color","useEffect","GLTFLoader","load","obj","scene","traverse","child","isMesh","material","castShadow","object","scale","position-y","position-z","Counter","id","dimensions","cols","owner","isPlaced","ref","useRef","size","props","useSpring","counterColor","y","transparent","mesh","rotation-x","attach","args","meshPhongMaterial","opacity","Clouds","active","rotation-y","BoardColumn","activeCol","setActiveCol","counters","setCounter","player","colId","counterElements","i","Math","floor","push","key","undefined","position-x","onClick","meshBasicMaterial","Board","isMoving","setActive","setIsMoving","rotationY","colElements","useFrame","value","receiveShadow","PlaceButton","placeCounter","gameState","src","className","e","preventDefault","handleClick","EndgameModal","setGameState","winner","isSinglePlayer","modalImage","ExitModal","modal","setModal","target","Interface","setIsSinglePlayer","console","log","Camera","three","useThree","camera","position","z","gl","setSize","window","innerWidth","innerHeight","extend","OrbitControls","Ground","GameCanvas","setPlayer","setCounters","activeCounter","setActiveCounter","setWinner","checkHorizontal","coords","count","checkVertical","checkDiagonalRight","checkDiagonalLeft","onCreated","shadowMap","enabled","type","isActive","intensity","angle","penumbra","length","counter","checkWin","reset","App","Game","Boolean","location","hostname","match","startApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","cordova","addEventListener"],"mappings":"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","file":"static/js/main.9be3525c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\n\nconst GameBoard = ()=>{\n    const [model, setModel] = useState();\n    const newMaterial = new THREE.MeshPhongMaterial({color: 0x006d90});\n\n    useEffect(()=>{\n        if(!model){\n        new GLTFLoader().load(\"blockfour-2.gltf\", (obj)=>{\n            obj.scene.traverse((child)=>{\n                if (child.isMesh) child.material = newMaterial;\n                if ( child instanceof THREE.Mesh ) { child.castShadow = true; }\n            });\n            setModel(obj);\n        });\n        }\n    });\n\n    return model ? <primitive object={model.scene} scale={[0.75,0.75,0.75]}\n    position-y={-0.675} position-z={-0.65}/> : null;\n}\n\nexport default GameBoard;","import React, { useRef } from 'react';\nimport { useSpring, a } from 'react-spring/three';\n\n/**\n * Model representation of the counters variable found in Game.js\n * \n * @param {*} param0 = States from parent\n */\nconst Counter = ({id, dimensions, cols, owner, isPlaced})=>{\n    const ref = useRef();\n    let size = (dimensions[0] / cols) * 1.075;\n    // Hex - Yellow, Red\n    let color = owner > 0 ? \"#e8ea5e\" : \"#bb4042\";\n\n    const props = useSpring({\n        counterColor: color,\n        y: isPlaced ? -0.625 + (0.23 * id) : (dimensions[1] + size) + 1,\n        transparent: isPlaced ? 1 : 0,\n    });\n\n    return (\n        <a.mesh\n        ref={ref}\n        rotation-x={true ? 0 : 1.55}\n        position-y={props.y}\n        castShadow={isPlaced}>\n        \n        <boxGeometry attach=\"geometry\" args={[size,size,size]} />\n        <a.meshPhongMaterial attach=\"material\" color={props.counterColor} opacity={props.transparent}/>\n        </a.mesh>\n    )\n}\n\nexport default Counter;","import React, { useState, useEffect } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\n\nconst Clouds = (active)=>{\n    const [model, setModel] = useState();\n    const newMaterial = new THREE.MeshPhongMaterial({color: 0xffffff});\n\n    useEffect(()=>{\n        if(!model){\n        new GLTFLoader().load(\"clouds.gltf\", (obj)=>{\n            obj.scene.traverse((child)=>{\n                if (child.isMesh) child.material = newMaterial;\n                if ( child instanceof THREE.Mesh ) { child.castShadow = true; }\n            });\n            setModel(obj);\n        });\n        }\n    });\n\n    return model ? <primitive object={model.scene} scale={[0.75,0.5,0.75]}\n    position-y={2} position-z={0} rotation-y={active ? 3.5 : -3.5}/> : null;\n}\n\nexport default Clouds;","import React, { useRef } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { useSpring, a } from 'react-spring/three';\n\nimport GameBoard from './3d/GameBoard';\nimport Counter from './Counter';\nimport Clouds from './3d/Clouds';\n\n/**\n * Board container\n * \n * @param {*} param0 = States from parent\n */\nconst Board = ({active, setActive, isMoving, setIsMoving, counters, setCounter, player, activeCol, setActiveCol})=>{\n    const ref = useRef();\n    const props = useSpring({\n      rotationY: active ? 3.15 : 0,\n    });\n  \n    // Board Size = [Width, Height, Depth]\n    let dimensions =  [1.5, 1.425, 0.2]\n    let colNum = 7;\n    let colElements = [];\n  \n    for(let i = 0; i < colNum; i++){\n      colElements.push(\n      <BoardColumn  key={i} id={i} dimensions={dimensions} cols={colNum} activeCol={activeCol} setActiveCol={setActiveCol}\n                    counters={counters} setCounter={setCounter} player={player}/>)\n    }\n  \n    useFrame(()=>{\n      if((props.rotationY.value == 3.15 && isMoving) || (props.rotationY.value == 0 && isMoving)){\n        setIsMoving(false);\n      }\n    });\n  \n    return (\n      <a.mesh\n        ref={ref}\n        rotation-y={props.rotationY}\n        position-y={0}\n        position-x={0.025}\n        castShadow \n        receiveShadow>\n          {colElements}\n          <GameBoard/>\n          <Clouds active={active}/>\n      </a.mesh>\n    )\n  }\n  \n  /**\n   * Column containing counters.\n   * \n   * @param {*} param0 = States from parent\n   */\n  const BoardColumn = ({id, dimensions, cols, activeCol, setActiveCol, counters, setCounter, player})=>{\n    const ref = useRef();\n    let colId = id;\n  \n    // Array of Counter components.\n    let counterElements = [];\n  \n    const props = useSpring({\n      color: activeCol === id ? \"red\" : \"grey\",\n    });\n  \n  \n    for(let i = 0; i < Math.floor(dimensions[1] / (dimensions[0] / cols)); i++){\n      // console.log(counters[colId][i]);\n      counterElements.push(\n        <Counter  key={i} id={i} dimensions={dimensions} cols={cols} owner={counters[colId][i]}\n                  isPlaced={counters[id][i] !== undefined}/>);\n    }\n  \n    return (\n      <a.mesh\n        ref={ref}\n        position-x={(-dimensions[0]/2 + ((dimensions[0] / cols) + 0.015) * id) + 0.06}\n        position-z={-0.05}\n        position-y={0.075}\n        onClick={()=>{\n          setActiveCol(-1);\n          setCounter([id, player]);\n          setActiveCol(id);\n        }}>\n        {counterElements}\n        <boxGeometry attach=\"geometry\" args={[(dimensions[0] / cols), dimensions[1], dimensions[2]]}/>\n        <a.meshBasicMaterial attach=\"material\" color={props.color} transparent={true} opacity={0.01}/>\n      </a.mesh>\n    )\n  }\n  \n  export default Board;","import React from 'react';\n\n/**\n * Handles counter placing.\n * \n * @param {*} param0 = States from parent\n */\nconst PlaceButton = ({setActive, active, setIsMoving, isMoving, placeCounter, gameState})=>{\n    function handleClick(e){\n      e.preventDefault();\n  \n      if(isMoving == false){\n        setActive(!active);\n        setIsMoving(true);\n        placeCounter();\n      }\n    }\n  \n    return(\n      <img src=\"assets/place-counter.svg\" id=\"place-button\" className={gameState == 0 ? \"hidden\" : \"\"} onClick={(e)=>{handleClick(e)}}/>\n    )\n}\n\n/**\n * Ending Game modal, will show winner or loser depending on game data.\n * \n * @param {*} param0 = States from parent\n */\nconst EndgameModal = ({gameState, setGameState, winner, isSinglePlayer})=>{\n\n    // Default to winner image.\n    let modalImage = \"winner-modal\";\n\n    // Player is loser if player two (CPU) wins.\n    if(winner < 0 && isSinglePlayer){\n        modalImage = \"loser-modal\";\n    }\n\n    return (\n        <div id=\"endgame-modal-container\" className={gameState > 1 ? \"active\" : \"\"}>\n            <img src={`assets/${modalImage}.svg`} id=\"end-modal\"/>\n            <img src={`assets/playerwin-${winner == 1 ? \"one\" : \"two\"}.svg`} id=\"end-winner\"/>\n            <img src=\"assets/tick.svg\" id=\"end-confirm\" onClick={()=>{\n                setGameState(0);\n            }}/>\n            <img src=\"assets/retry.svg\" id=\"retry-game\" onClick={()=>{\n                setGameState(1, true);\n            }}/>\n        </div>\n    );\n}\n\n/**\n * Quit menu modal.\n * \n * @param {*} param0 = States from parent\n */\nconst ExitModal = ({modal, setModal, gameState, setGameState})=>{\n    return (\n        <div id=\"exit-modal-container\" className={modal && gameState !== 0 ? \"active\" : \"\"} onClick={(e)=>{\n            if(e.target.id !== \"exit-modal\" && e.target.id !== \"exit-confirm\"){\n                setModal(!modal);\n            }\n        }}>\n            <img src=\"assets/quit-modal.svg\" id=\"exit-modal\"/>\n            <img src=\"assets/tick.svg\" id=\"exit-confirm\" onClick={()=>{\n                setGameState(0);\n                setModal(false);\n            }}/>\n            <img src=\"assets/exit-2.svg\" id=\"exit-cancel\"/>\n        </div>\n    );\n}\n\n/**\n * Interface containing all the buttons that interact with game settings.\n * \n * @param {*} param0 = States from parent\n */\nfunction Interface({setActive, active, setIsMoving, isMoving, placeCounter, modal, setModal, gameState, setGameState, isSinglePlayer, setIsSinglePlayer, winner}) {\n\n    return (\n      <div className=\"Interface\">\n            <img src=\"assets/logo.svg\" id=\"game-logo\" className={gameState == 0 ? \"menu\" : \"\"}/>\n            <img src={`assets/playerturn-${!active ? \"one\" : \"two\"}.svg`} id=\"turn-card\" className={gameState == 0 ? \"hidden\" : \"\"}/>\n\n            <img src=\"assets/single-player.svg\" id=\"singleplay-btn\" onClick={()=>{\n                setGameState(1);\n                setIsSinglePlayer(true);\n            }}  className={gameState > 0 ? \"hidden\" : \"\"}/>\n\n            <img src=\"assets/two-player.svg\" id=\"twoplayer-btn\" onClick={()=>{\n                setGameState(1);\n                setIsSinglePlayer(false);\n            }}  className={gameState > 0 ? \"hidden\" : \"\"}/>\n\n            <img src=\"assets/exit.svg\" id=\"exit-game\"  className={gameState == 0 ? \"hidden\" : \"\"} onClick={()=>{\n                setModal(!modal);\n                console.log(modal);\n            }}/>\n\n            <img src={\"assets/credit.svg\"} id=\"project-credit\" className={gameState > 0 ? \"hidden\" : \"\"}/>\n\n            <PlaceButton gameState={gameState} setActive={setActive} active={active} setIsMoving={setIsMoving} isMoving={isMoving} placeCounter={placeCounter} />\n            <ExitModal modal={modal} setModal={setModal} gameState={gameState} setGameState={setGameState}/>\n            <EndgameModal gameState={gameState} setGameState={setGameState} winner={winner} isSinglePlayer={isSinglePlayer}/>\n            \n      </div>\n    );\n  }\n  \n  export default Interface;","import React, { useRef, useState } from 'react';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Canvas, extend, useThree, useRender } from 'react-three-fiber';\nimport *  as THREE from 'three';\n\nimport Board from './Board';\nimport Interface from './Interface';\n\n/**\n * Game camera, placed looking at center of the game board.\n */\nconst Camera = () => {\n  const three = useThree();\n  const camera = three.camera;\n  camera.position.z = 2.5;\n  camera.position.y = 0;\n  three.gl.setSize(window.innerWidth, window.innerHeight);\n\n  return null;\n};\n\nextend({OrbitControls});\n\n/**\n * Controles used for testing purposes.\n * TODO: Remove on project completion.\n */\nconst Controls = () =>{\n  const orbitRef = useRef();\n  const {camera, gl} = useThree();\n\n  useRender(()=>{\n    orbitRef.current.update();\n  });\n\n  return (\n  <orbitControls\n    maxPolarAngle={Math.PI / 2}\n    minPolarAngle={Math.PI / 2}\n    args={[camera, gl.domElement]} \n    ref={orbitRef}/>);\n};\n\n/**\n * Ground model.\n */\nconst Ground = ()=>{\n  return (\n    <mesh\n    rotation-x={-1.6}\n    position-z={0}\n    position-y={-0.675}\n    receiveShadow>\n      <planeBufferGeometry attach=\"geometry\" args={[10, 10]} />\n      <meshPhongMaterial attach=\"material\" color={\"#4fd654\"}/>\n    </mesh>\n  )\n}\n\n/**\n * Game Container\n */\nconst GameCanvas = ()=>{\n\n  // Toggles rotation of game board\n  const [active, setActive] = useState(false);\n\n  // Prevent clicking to place if Board is moving\n  const [isMoving, setIsMoving] = useState(false);\n\n  // Get & Set active player. 1 = Player One, -1 = Player Two\n  const [player, setPlayer] = useState(1);\n  \n  // Counters in Columns. \n  const [counters, setCounters] = useState([\n    [],[],[],[],[],[],[]\n  ]);\n\n  // Counter to be placed on board. [0] = column index, [1] = owner\n  const [activeCounter, setActiveCounter] = useState([0,player]);\n\n  // Set active column, start at -1 and none selected.\n  const [activeCol, setActiveCol] = useState(0);\n\n  // Set exit modal\n  const [modal, setModal] = useState(false);\n\n  // Controls Game menus in Interface\n  const [gameState, setGameState] = useState(0);\n\n  // Game mode\n  const [isSinglePlayer, setIsSinglePlayer] = useState(true);\n\n  // Winning Player - default to player one.\n  const [winner, setWinner] = useState(1);\n\n  /**\n   * Acts as a barrier between gameState changes.\n   * Makes it easier to reset game when needed.\n   * \n   * @param {int} i = Game state value\n   * @param {Boolean} reset = Reset counters\n   */\n  function gameStateChange(i, reset){\n    // If set to 0 or reset is true, reset counters -- creating new game.\n    if(i === 0 || reset){\n      setCounters([\n        [],[],[],[],[],[],[]\n      ]);\n    }\n\n    setGameState(i);\n  }\n  \n\n  /**\n   * Confirm placement of counter & overwrite var.\n   */\n  function placeCounter(){\n    counters[activeCounter[0]][counters[activeCounter[0]].length] = activeCounter[1];\n    activeCounter.push(counters[activeCounter[0]].length - 1);\n    checkWin(activeCounter);\n    setPlayer(player * -1);\n    setActiveCounter([activeCol, player * -1]);\n  }\n\n  /**\n   * Creates an array of possible win directions and if any are true,\n   * sets game to state 2 (Win state).\n   * \n   * @param {*} counter = Last placed counter\n   */\n  function checkWin(counter){\n    // X and Y axis\n    let coords = [counter[0], counter[2]];\n    // Player who owns counter\n    let owner = counter[1];\n\n    // Array of possible win directions\n    let checkWin = [\n      checkHorizontal(coords, owner), \n      checkVertical(coords, owner),\n      checkDiagonalLeft(coords, owner),\n      checkDiagonalRight(coords, owner)\n    ];\n\n    // If any win, set game to state 2 (Win)\n    for(let i = 0; i < checkWin.length; i++){\n      if(checkWin[i]){\n        setWinner(owner);\n        console.log(winner);\n        setGameState(2);\n        break;\n      }\n    }\n\n  }\n\n  /**\n   * Checks Horizontally for matching counters that are in a sequence.\n   * \n   * @param {*} coords = Coordinates of last placed counter\n   * @param {*} owner = Owner of last placed counter\n   */\n  function checkHorizontal(coords, owner){\n    let count = 1;\n    // Check Right\n    for(let i = 1; i < 7; i++){\n      if(coords[0] + i > 6){\n        break;\n      } else if(typeof counters[coords[0] + i] !== 'undefined') {\n        if(counters[coords[0] + i][coords[1]] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n    // Check Left\n    for(let i = 1; i < 7; i++){\n      if(coords[0] - i < 0){\n        break;\n      } else if(typeof counters[coords[0] - i] !== 'undefined') {\n        if(counters[coords[0] - i][coords[1]] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return count >= 4;\n  }\n\n  /**\n   * Checks Vertically for matching counters that are in a sequence.\n   * \n   * @param {*} coords = Coordinates of last placed counter\n   * @param {*} owner = Owner of last placed counter\n   */\n  function checkVertical(coords, owner){\n    let count = 1;\n    // Check Up\n    for(let i = 1; i < 7; i++){\n      if(coords[1] + i > 5){\n        break;\n      } else if(typeof counters[coords[0]][coords[1] + i] !== 'undefined') {\n        if(counters[coords[0]][coords[1] + i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n    // Check Down\n    for(let i = 1; i < 7; i++){\n      if(coords[1] - i < 0){\n        break;\n      } else if(typeof counters[coords[0]][coords[1] - i] !== 'undefined') {\n        if(counters[coords[0]][coords[1] - i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return count >= 4;\n  }\n\n  /**\n   * Checks Diagonally (Right) for matching counters that are in a sequence.\n   * \n   * @param {*} coords = Coordinates of last placed counter\n   * @param {*} owner = Owner of last placed counter\n   */\n  function checkDiagonalRight(coords, owner){\n    let count = 1;\n    // Check Up\n    for(let i = 1; i < 7; i++){\n      if(coords[0] + i > 5 || coords[1] + i > 5){\n        break;\n      } else if(typeof counters[coords[0] + i][coords[1] + i] !== 'undefined') {\n        if(counters[coords[0] + i][coords[1] + i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n    // Check Down\n    for(let i = 1; i < 7; i++){\n      if(coords[0] - i < 0 || coords[1] - i < 0){\n        break;\n      } else if(typeof counters[coords[0] - i][coords[1] - i] !== 'undefined') {\n        if(counters[coords[0] - i][coords[1] - i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return count >= 4;\n  }\n\n  /**\n   * Checks Diagonally (Left) for matching counters that are in a sequence.\n   * \n   * @param {*} coords = Coordinates of last placed counter\n   * @param {*} owner = Owner of last placed counter\n   */\n  function checkDiagonalLeft(coords, owner){\n    let count = 1;\n    // Check Up\n    for(let i = 1; i < 7; i++){\n      if(coords[0] + i > 5 || coords[1] - i < 0){\n        break;\n      } else if(typeof counters[coords[0] + i][coords[1] - i] !== 'undefined') {\n        if(counters[coords[0] + i][coords[1] - i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n    // Check Down\n    for(let i = 1; i < 7; i++){\n      if(coords[0] - i < 0 || coords[1] + i > 5){\n        break;\n      } else if(typeof counters[coords[0] - i][coords[1] + i] !== 'undefined') {\n        if(counters[coords[0] - i][coords[1] + i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return count >= 4;\n  }\n\n  return(\n      <div id=\"game-root\">\n        <Canvas onCreated={({ gl }) => ((gl.shadowMap.enabled = true), (gl.shadowMap.type = THREE.PCFSoftShadowMap))}\n                className={modal || gameState !== 1 ? \"active\" : \"\"} id=\"canvas-container\">\n          <Camera isActive={active}/>\n          <ambientLight intensity={0.5} />\n          <spotLight intensity={1.5} position={[20, 5, 10]} angle={0.2} penumbra={1} castShadow />\n          <Board  setActive={setActive} active={active} isMoving={isMoving} setIsMoving={setIsMoving} counters={counters}\n                  setCounter={setActiveCounter} player={player} activeCol={activeCol} setActiveCol={setActiveCol}/>\n          {/* <Controls/> */}\n          <Ground/>\n          \n          <fog attach=\"fog\" args={['#4cd4ff', 0, 8]} />\n        </Canvas>\n        <Interface  setActive={setActive} active={active} isMoving={isMoving} setIsMoving={setIsMoving}\n                    placeCounter={placeCounter} modal={modal} setModal={setModal} gameState={gameState} \n                    setGameState={gameStateChange} winner={winner}\n                    isSinglePlayer={isSinglePlayer} setIsSinglePlayer={setIsSinglePlayer}/>\n      </div>\n  )\n}\n\nexport default GameCanvas;","import React from 'react';\nimport './App.css';\n\nimport GameCanvas from './components/Game.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameCanvas/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n    serviceWorker.unregister();\n}\n\nif(window.cordova){\n    document.addEventListener('deviceready', startApp, false);\n} else {\n    startApp();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}