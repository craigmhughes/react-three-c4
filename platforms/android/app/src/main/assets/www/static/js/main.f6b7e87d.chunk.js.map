{"version":3,"sources":["components/3d/GameBoard.js","components/3d/BoardPointer.js","components/Counter.js","components/3d/Clouds.js","components/Board.js","components/Interface.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["GameBoard","useState","model","setModel","newMaterial","THREE","color","useEffect","GLTFLoader","load","obj","scene","traverse","child","isMesh","material","castShadow","object","scale","position-y","position-z","BoardPointer","activeCol","props","useSpring","x","primitive","position-x","Counter","id","dimensions","cols","owner","isPlaced","ref","useRef","size","counterColor","y","transparent","mesh","rotation-x","attach","args","meshPhongMaterial","opacity","Clouds","active","rotation-y","BoardColumn","setActiveCol","counters","setCounter","player","colId","counterElements","i","Math","floor","push","key","undefined","onClick","meshBasicMaterial","Board","isMoving","setActive","setIsMoving","rotationY","colElements","useFrame","value","receiveShadow","PlaceButton","placeCounter","gameState","src","className","e","preventDefault","handleClick","EndgameModal","setGameState","winner","isSinglePlayer","modalImage","ExitModal","modal","setModal","target","Interface","setIsSinglePlayer","console","log","Camera","three","useThree","camera","position","z","gl","setSize","window","innerWidth","innerHeight","extend","OrbitControls","Ground","GameCanvas","setPlayer","setCounters","activeCounter","setActiveCounter","setWinner","aiCounter","length","checkWin","bestMove","defeatResult","pop","winResult","random","ai_turn","counter","justChecking","coords","checkHorizontal","checkVertical","checkDiagonalLeft","checkDiagonalRight","foundWin","count","onCreated","shadowMap","enabled","type","isActive","intensity","angle","penumbra","reset","App","Game","Boolean","location","hostname","match","startApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","cordova","addEventListener"],"mappings":"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","file":"static/js/main.f6b7e87d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\n\nconst GameBoard = ()=>{\n    const [model, setModel] = useState();\n    const newMaterial = new THREE.MeshPhongMaterial({color: 0x006d90});\n\n    useEffect(()=>{\n        if(!model){\n        new GLTFLoader().load(\"blockfour-2.gltf\", (obj)=>{\n            obj.scene.traverse((child)=>{\n                if (child.isMesh) child.material = newMaterial;\n                if ( child instanceof THREE.Mesh ) { child.castShadow = true; }\n            });\n            setModel(obj);\n        });\n        }\n    });\n\n    return model ? <primitive object={model.scene} scale={[0.75,0.75,0.75]}\n    position-y={-0.675} position-z={-0.65}/> : null;\n}\n\nexport default GameBoard;","import React, { useState, useEffect } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport { useSpring, a } from 'react-spring/three';\n\nconst BoardPointer = ({activeCol})=>{\n    const [model, setModel] = useState();\n    const newMaterial = new THREE.MeshPhongMaterial({color: 0xFFFFFF});\n\n    const props = useSpring({\n        x: -0.65 + (0.21 * activeCol),\n    });\n\n    useEffect(()=>{\n        if(!model){\n        new GLTFLoader().load(\"c4-pointer.gltf\", (obj)=>{\n            obj.scene.traverse((child)=>{\n                if (child.isMesh) child.material = newMaterial;\n                if ( child instanceof THREE.Mesh ) { child.castShadow = true; }\n            });\n            setModel(obj);\n        });\n        }\n    });\n\n    return model ? <a.primitive object={model.scene} scale={[0.1,0.1,0.1]}\n    position-y={1.1} position-x={props.x}/> : null;\n}\n\nexport default BoardPointer;","import React, { useRef } from 'react';\nimport { useSpring, a } from 'react-spring/three';\n\n/**\n * Model representation of the counters variable found in Game.js\n * \n * @param {*} param0 = States from parent\n */\nconst Counter = ({id, dimensions, cols, owner, isPlaced})=>{\n    const ref = useRef();\n    let size = (dimensions[0] / cols) * 1.075;\n    // Hex - Yellow, Red\n    let color = owner > 0 ? \"#e8ea5e\" : \"#bb4042\";\n\n    const props = useSpring({\n        counterColor: color,\n        y: isPlaced ? -0.625 + (0.23 * id) : (dimensions[1] + size) + 1,\n        transparent: isPlaced ? 1 : 0,\n    });\n\n    return (\n        <a.mesh\n        ref={ref}\n        rotation-x={true ? 0 : 1.55}\n        position-y={props.y}\n        castShadow={isPlaced}>\n        \n        <boxGeometry attach=\"geometry\" args={[size,size,size]} />\n        <a.meshPhongMaterial attach=\"material\" color={props.counterColor} opacity={props.transparent}/>\n        </a.mesh>\n    )\n}\n\nexport default Counter;","import React, { useState, useEffect } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\n\nconst Clouds = (active)=>{\n    const [model, setModel] = useState();\n    const newMaterial = new THREE.MeshPhongMaterial({color: 0xffffff});\n\n    useEffect(()=>{\n        if(!model){\n        new GLTFLoader().load(\"clouds.gltf\", (obj)=>{\n            obj.scene.traverse((child)=>{\n                if (child.isMesh) child.material = newMaterial;\n                if ( child instanceof THREE.Mesh ) { child.castShadow = true; }\n            });\n            setModel(obj);\n        });\n        }\n    });\n\n    return model ? <primitive object={model.scene} scale={[0.75,0.5,0.75]}\n    position-y={2} position-z={0} rotation-y={active ? 3.5 : -3.5}/> : null;\n}\n\nexport default Clouds;","import React, { useRef } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { useSpring, a } from 'react-spring/three';\n\nimport GameBoard from './3d/GameBoard';\nimport BoardPointer from './3d/BoardPointer';\nimport Counter from './Counter';\nimport Clouds from './3d/Clouds';\n\n/**\n * Board container\n * \n * @param {*} param0 = States from parent\n */\nconst Board = ({active, setActive, isMoving, setIsMoving, counters, setCounter, player, activeCol, setActiveCol})=>{\n    const ref = useRef();\n    const props = useSpring({\n      rotationY: active ? 3.15 : 0,\n    });\n  \n    // Board Size = [Width, Height, Depth]\n    let dimensions =  [1.5, 1.425, 0.2]\n    let colNum = 7;\n    let colElements = [];\n  \n    for(let i = 0; i < colNum; i++){\n      colElements.push(\n      <BoardColumn  key={i} id={i} dimensions={dimensions} cols={colNum} activeCol={activeCol} setActiveCol={setActiveCol}\n                    counters={counters} setCounter={setCounter} player={player}/>)\n    }\n  \n    useFrame(()=>{\n      if((props.rotationY.value == 3.15 && isMoving) || (props.rotationY.value == 0 && isMoving)){\n        setIsMoving(false);\n      }\n    });\n  \n    return (\n      <a.mesh\n        ref={ref}\n        rotation-y={props.rotationY}\n        position-y={0}\n        position-x={0.025}\n        castShadow \n        receiveShadow>\n          {colElements}\n          <GameBoard/>\n          <BoardPointer activeCol={activeCol}/>\n          <Clouds active={active}/>\n      </a.mesh>\n    )\n  }\n  \n  /**\n   * Column containing counters.\n   * \n   * @param {*} param0 = States from parent\n   */\n  const BoardColumn = ({id, dimensions, cols, activeCol, setActiveCol, counters, setCounter, player})=>{\n    const ref = useRef();\n    let colId = id;\n  \n    // Array of Counter components.\n    let counterElements = [];\n  \n    const props = useSpring({\n      color: activeCol === id ? \"red\" : \"grey\",\n    });\n  \n  \n    for(let i = 0; i < Math.floor(dimensions[1] / (dimensions[0] / cols)); i++){\n      // console.log(counters[colId][i]);\n      counterElements.push(\n        <Counter  key={i} id={i} dimensions={dimensions} cols={cols} owner={counters[colId][i]}\n                  isPlaced={counters[id][i] !== undefined}/>);\n    }\n  \n    return (\n      <a.mesh\n        ref={ref}\n        position-x={(-dimensions[0]/2 + ((dimensions[0] / cols) + 0.015) * id) + 0.06}\n        position-z={-0.05}\n        position-y={0.075}\n        onClick={()=>{\n          setActiveCol(-1);\n          setCounter([id, player]);\n          setActiveCol(id);\n        }}>\n        {counterElements}\n        <boxGeometry attach=\"geometry\" args={[(dimensions[0] / cols), dimensions[1], dimensions[2]]}/>\n        <a.meshBasicMaterial attach=\"material\" color={props.color} transparent={true} opacity={0.01}/>\n      </a.mesh>\n    )\n  }\n  \n  export default Board;","import React from 'react';\n\n/**\n * Handles counter placing.\n * \n * @param {*} param0 = States from parent\n */\nconst PlaceButton = ({setIsMoving, isMoving, placeCounter, gameState})=>{\n    function handleClick(e){\n      e.preventDefault();\n  \n      if(isMoving == false){\n        setIsMoving(true);\n        placeCounter();\n      }\n    }\n  \n    return(\n      <img src=\"assets/place-counter.svg\" id=\"place-button\" className={gameState == 0 ? \"hidden\" : \"\"} onClick={(e)=>{handleClick(e)}}/>\n    )\n}\n\n/**\n * Ending Game modal, will show winner or loser depending on game data.\n * \n * @param {*} param0 = States from parent\n */\nconst EndgameModal = ({gameState, setGameState, winner, isSinglePlayer})=>{\n\n    // Default to winner image.\n    let modalImage = \"winner-modal\";\n\n    // Player is loser if player two (CPU) wins.\n    if(winner < 0 && isSinglePlayer){\n        modalImage = \"loser-modal\";\n    }\n\n    return (\n        <div id=\"endgame-modal-container\" className={gameState > 1 ? \"active\" : \"\"}>\n            <img src={`assets/${modalImage}.svg`} id=\"end-modal\"/>\n            <img src={`assets/playerwin-${winner == 1 ? \"one\" : \"two\"}.svg`} id=\"end-winner\"/>\n            <img src=\"assets/tick.svg\" id=\"end-confirm\" onClick={()=>{\n                setGameState(0);\n            }}/>\n            <img src=\"assets/retry.svg\" id=\"retry-game\" onClick={()=>{\n                setGameState(1, true);\n            }}/>\n        </div>\n    );\n}\n\n/**\n * Quit menu modal.\n * \n * @param {*} param0 = States from parent\n */\nconst ExitModal = ({modal, setModal, gameState, setGameState})=>{\n    return (\n        <div id=\"exit-modal-container\" className={modal && gameState !== 0 ? \"active\" : \"\"} onClick={(e)=>{\n            if(e.target.id !== \"exit-modal\" && e.target.id !== \"exit-confirm\"){\n                setModal(!modal);\n            }\n        }}>\n            <img src=\"assets/quit-modal.svg\" id=\"exit-modal\"/>\n            <img src=\"assets/tick.svg\" id=\"exit-confirm\" onClick={()=>{\n                setGameState(0, true);\n                setModal(false);\n            }}/>\n            <img src=\"assets/exit-2.svg\" id=\"exit-cancel\"/>\n        </div>\n    );\n}\n\n/**\n * Interface containing all the buttons that interact with game settings.\n * \n * @param {*} param0 = States from parent\n */\nfunction Interface({setActive, active, setIsMoving, isMoving, placeCounter, modal, setModal, gameState, setGameState, isSinglePlayer, setIsSinglePlayer, winner}) {\n\n    return (\n      <div className=\"Interface\">\n            <img src=\"assets/logo.svg\" id=\"game-logo\" className={gameState == 0 ? \"menu\" : \"\"}/>\n            <img src={`assets/playerturn-${!active ? \"one\" : \"two\"}.svg`} id=\"turn-card\" className={gameState == 0 ? \"hidden\" : \"\"}/>\n\n            <div id=\"singleplay-btn\" className={gameState > 0 ? \"hidden\" : \"\"}>\n                <img src=\"assets/single-player.svg\" onClick={()=>{\n                    setGameState(1);\n                    setIsSinglePlayer(true);\n                    console.log(\"Single Player = \" + isSinglePlayer);\n                }}  />\n            </div>\n            \n            <div id=\"twoplayer-btn\" className={gameState > 0 ? \"hidden\" : \"\"}>\n                <img src=\"assets/two-player.svg\" onClick={()=>{\n                    setGameState(1);\n                    setIsSinglePlayer(false);\n                    console.log(\"Single Player = \" + isSinglePlayer);\n                }}  />\n            </div>\n\n            <img src=\"assets/exit.svg\" id=\"exit-game\"  className={gameState == 0 ? \"hidden\" : \"\"} onClick={()=>{\n                setModal(!modal);\n                console.log(modal);\n            }}/>\n\n            <img src={\"assets/credit.svg\"} id=\"project-credit\" className={gameState > 0 ? \"hidden\" : \"\"}/>\n\n            <PlaceButton gameState={gameState} setActive={setActive} active={active} setIsMoving={setIsMoving} isMoving={isMoving} placeCounter={placeCounter} />\n            <ExitModal modal={modal} setModal={setModal} gameState={gameState} setGameState={setGameState}/>\n            <EndgameModal gameState={gameState} setGameState={setGameState} winner={winner} isSinglePlayer={isSinglePlayer}/>\n            \n      </div>\n    );\n  }\n  \n  export default Interface;","import React, { useRef, useState } from 'react';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Canvas, extend, useThree, useRender } from 'react-three-fiber';\nimport *  as THREE from 'three';\n\nimport Board from './Board';\nimport Interface from './Interface';\n\n/**\n * Game camera, placed looking at center of the game board.\n */\nconst Camera = () => {\n  const three = useThree();\n  const camera = three.camera;\n  camera.position.z = 2.5;\n  camera.position.y = 0;\n  three.gl.setSize(window.innerWidth, window.innerHeight);\n\n  return null;\n};\n\nextend({OrbitControls});\n\n/**\n * Controls used for testing purposes.\n * TODO: Remove on project completion.\n */\nconst Controls = () =>{\n  const orbitRef = useRef();\n  const {camera, gl} = useThree();\n\n  useRender(()=>{\n    orbitRef.current.update();\n  });\n\n  return (\n  <orbitControls\n    maxPolarAngle={Math.PI / 2}\n    minPolarAngle={Math.PI / 2}\n    args={[camera, gl.domElement]} \n    ref={orbitRef}/>);\n};\n\n/**\n * Ground model.\n */\nconst Ground = ()=>{\n  return (\n    <mesh\n    rotation-x={-1.6}\n    position-z={0}\n    position-y={-0.675}\n    receiveShadow>\n      <planeBufferGeometry attach=\"geometry\" args={[10, 10]} />\n      <meshPhongMaterial attach=\"material\" color={\"#4fd654\"}/>\n    </mesh>\n  )\n}\n\n/**\n * Game Container\n */\nconst GameCanvas = ()=>{\n\n  // Toggles rotation of game board\n  const [active, setActive] = useState(false);\n\n  // Prevent clicking to place if Board is moving\n  const [isMoving, setIsMoving] = useState(false);\n\n  // Get & Set active player. 1 = Player One, -1 = Player Two\n  const [player, setPlayer] = useState(1);\n  \n  // Counters in Columns. \n  const [counters, setCounters] = useState([\n    [],[],[],[],[],[],[]\n  ]);\n\n  // Counter to be placed on board. [0] = column index, [1] = owner\n  const [activeCounter, setActiveCounter] = useState([0,player]);\n\n  // Set active column, start at -1 and none selected.\n  const [activeCol, setActiveCol] = useState(0);\n\n  // Set exit modal\n  const [modal, setModal] = useState(false);\n\n  // Controls Game menus in Interface\n  const [gameState, setGameState] = useState(0);\n\n  // Game mode\n  const [isSinglePlayer, setIsSinglePlayer] = useState(true);\n\n  // Winning Player - default to player one.\n  const [winner, setWinner] = useState(1);\n\n  /**\n   * Acts as a barrier between gameState changes.\n   * Makes it easier to reset game when needed.\n   * \n   * @param {int} i = Game state value\n   * @param {Boolean} reset = Reset counters\n   */\n  function gameStateChange(i, reset){\n    // If set to 0 or reset is true, reset counters -- creating new game.\n    if(i === 0 || reset){\n      setCounters([\n        [],[],[],[],[],[],[]\n      ]);\n\n      setActive(false);\n      setPlayer(1);\n      setActiveCounter([activeCol,1]);\n    }\n\n    setGameState(i);\n  }\n  \n\n  /**\n   * Confirm placement of counter & overwrite var.\n   */\n  function placeCounter(aiCounter){\n    // console.log(active);\n    if(typeof aiCounter !== 'undefined'){\n      // console.log(aiCounter);\n      counters[aiCounter[0]][counters[aiCounter[0]].length] = aiCounter[1];\n      aiCounter.push(counters[aiCounter[0]].length - 1);\n      checkWin(aiCounter);\n    } else {\n      counters[activeCounter[0]][counters[activeCounter[0]].length] = activeCounter[1];\n      activeCounter.push(counters[activeCounter[0]].length - 1);\n      checkWin(activeCounter);\n    }\n\n    // Switch player if two player, otherwise ai_turn() will take care of it.\n    if(!isSinglePlayer){\n      setPlayer(player * -1);\n      setActiveCounter([activeCol, player * -1]);\n    }\n    \n    if(aiCounter){\n      setActive(false);\n    } else if(active == false && isSinglePlayer){\n      ai_turn();\n    } else {\n      setActive(!active);\n    }\n\n  }\n\n  /**\n   * Computer Player's turn\n   */\n  function ai_turn(){\n\n      let bestMove;\n\n      for(let i = 0; i < 7; i++){\n        if(counters[i].length < 6){\n          counters[i][counters[i].length] = 1;\n          let defeatResult = checkWin([i, 1, counters[i].length - 1], true);\n          counters[i].pop();\n\n          counters[i][counters[i].length] = -1;\n          let winResult = checkWin([i, -1, counters[i].length - 1], true);\n          counters[i].pop();\n\n          // Assign move to win first (if available).\n          if(winResult !== undefined && winResult !== \"tie\"){\n            bestMove = i;\n            break;\n          }\n\n          // Assign counter-win move.\n          if(defeatResult !== undefined && defeatResult !== \"tie\"){\n            bestMove = i;\n          }\n        }\n      }\n\n      if (bestMove == undefined){\n        bestMove = Math.floor(Math.random() * 7);\n      }\n\n      placeCounter([bestMove, -1]);\n      checkWin([bestMove, -1, counters[bestMove].length - 1])  \n  }\n\n  /**\n   * Creates an array of possible win directions and if any are true,\n   * sets game to state 2 (Win state).\n   * \n   * @param {Array} counter = Last placed counter [x-pos, owner, y-pos]\n   * @param {Boolean} justChecking = pass true to recieve prediction of winning move.\n   */\n  function checkWin(counter, justChecking){\n    // X and Y axis\n    let coords = [counter[0], counter[2]];\n    // Player who owns counter\n    let owner = counter[1];\n\n    // Array of possible win directions\n    let checkWin = [\n      checkHorizontal(coords, owner), \n      checkVertical(coords, owner),\n      checkDiagonalLeft(coords, owner),\n      checkDiagonalRight(coords, owner)\n    ];\n\n    let foundWin = false;\n\n    // If any win, set game to state 2 (Win)\n    for(let i = 0; i < checkWin.length; i++){\n      if(checkWin[i] && justChecking){\n        // Return winning player\n        return owner;\n\n      } else if(checkWin[i]){\n        setWinner(owner);\n        console.log(winner);\n        setGameState(2);\n        foundWin = true;\n        setActive(false);\n        setPlayer(1);\n        break;\n      }\n    }\n\n    if(!foundWin){\n      return \"tie\";\n    }\n\n  }\n\n  /**\n   * Checks Horizontally for matching counters that are in a sequence.\n   * \n   * @param {*} coords = Coordinates of last placed counter\n   * @param {*} owner = Owner of last placed counter\n   */\n  function checkHorizontal(coords, owner){\n    let count = 1;\n    // Check Right\n    for(let i = 1; i < 7; i++){\n      if(coords[0] + i > 6){\n        break;\n      } else if(typeof counters[coords[0] + i] !== 'undefined') {\n        if(counters[coords[0] + i][coords[1]] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n    // Check Left\n    for(let i = 1; i < 7; i++){\n      if(coords[0] - i < 0){\n        break;\n      } else if(typeof counters[coords[0] - i] !== 'undefined') {\n        if(counters[coords[0] - i][coords[1]] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return count >= 4;\n  }\n\n  /**\n   * Checks Vertically for matching counters that are in a sequence.\n   * \n   * @param {*} coords = Coordinates of last placed counter\n   * @param {*} owner = Owner of last placed counter\n   */\n  function checkVertical(coords, owner){\n    let count = 1;\n    // Check Up\n    for(let i = 1; i < 7; i++){\n      if(coords[1] + i > 6){\n        break;\n      } else if(typeof counters[coords[0]][coords[1] + i] !== 'undefined') {\n        if(counters[coords[0]][coords[1] + i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n    // Check Down\n    for(let i = 1; i < 7; i++){\n      if(coords[1] - i < 0){\n        break;\n      } else if(typeof counters[coords[0]][coords[1] - i] !== 'undefined') {\n        if(counters[coords[0]][coords[1] - i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return count >= 4;\n  }\n\n  /**\n   * Checks Diagonally (Right) for matching counters that are in a sequence.\n   * \n   * @param {*} coords = Coordinates of last placed counter\n   * @param {*} owner = Owner of last placed counter\n   */\n  function checkDiagonalRight(coords, owner){\n    let count = 1;\n    // Check Up\n    for(let i = 1; i < 7; i++){\n      if(coords[0] + i > 6 || coords[1] + i > 6){\n        break;\n      } else if(typeof counters[coords[0] + i][coords[1] + i] !== 'undefined') {\n        if(counters[coords[0] + i][coords[1] + i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n    // Check Down\n    for(let i = 1; i < 7; i++){\n      if(coords[0] - i < 0 || coords[1] - i < 0){\n        break;\n      } else if(typeof counters[coords[0] - i][coords[1] - i] !== 'undefined') {\n        if(counters[coords[0] - i][coords[1] - i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return count >= 4;\n  }\n\n  /**\n   * Checks Diagonally (Left) for matching counters that are in a sequence.\n   * \n   * @param {*} coords = Coordinates of last placed counter\n   * @param {*} owner = Owner of last placed counter\n   */\n  function checkDiagonalLeft(coords, owner){\n    let count = 1;\n    // Check Up\n    for(let i = 1; i < 7; i++){\n      if(coords[0] + i > 6 || coords[1] - i < 0){\n        break;\n      } else if(typeof counters[coords[0] + i][coords[1] - i] !== 'undefined') {\n        if(counters[coords[0] + i][coords[1] - i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n    // Check Down\n    for(let i = 1; i < 7; i++){\n      if(coords[0] - i < 0 || coords[1] + i > 6){\n        break;\n      } else if(typeof counters[coords[0] - i][coords[1] + i] !== 'undefined') {\n        if(counters[coords[0] - i][coords[1] + i] == owner){\n          count+=1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return count >= 4;\n  }\n\n  return(\n      <div id=\"game-root\">\n        <Canvas onCreated={({ gl }) => ((gl.shadowMap.enabled = true), (gl.shadowMap.type = THREE.PCFSoftShadowMap))}\n                className={modal || gameState !== 1 ? \"active\" : \"\"} id=\"canvas-container\">\n          <Camera isActive={active}/>\n          <ambientLight intensity={0.5} />\n          <spotLight intensity={1.5} position={[20, 5, 10]} angle={0.2} penumbra={1} castShadow />\n          <Board  setActive={setActive} active={active} isMoving={isMoving} setIsMoving={setIsMoving} counters={counters}\n                  setCounter={setActiveCounter} player={player} activeCol={activeCol} setActiveCol={setActiveCol}/>\n          {/* <Controls/> */}\n          <Ground/>\n          \n          <fog attach=\"fog\" args={['#4cd4ff', 0, 8]} />\n        </Canvas>\n        <Interface  setActive={setActive} active={active} isMoving={isMoving} setIsMoving={setIsMoving}\n                    placeCounter={placeCounter} modal={modal} setModal={setModal} gameState={gameState} \n                    setGameState={gameStateChange} winner={winner}\n                    isSinglePlayer={isSinglePlayer} setIsSinglePlayer={setIsSinglePlayer}/>\n      </div>\n  )\n}\n\nexport default GameCanvas;","import React from 'react';\nimport './App.css';\n\nimport GameCanvas from './components/Game.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameCanvas/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n    serviceWorker.unregister();\n}\n\nif(window.cordova){\n    document.addEventListener('deviceready', startApp, false);\n} else {\n    startApp();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}