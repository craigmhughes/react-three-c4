{"version":3,"sources":["logo.svg","components/game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Camera","three","useThree","camera","position","z","gl","setSize","window","innerWidth","innerHeight","extend","OrbitControls","Board","active","isMoving","setActive","setIsMoving","counters","setCounter","player","activeCol","setActiveCol","ref","useRef","props","useSpring","rotationY","dimensions","colElements","i","push","key","id","cols","useFrame","value","mesh","rotation-y","position-x","BoardColumn","colId","counterElements","color","Math","floor","owner","isPlaced","undefined","onClick","attach","args","meshBasicMaterial","wireframe","Counter","size","counterColor","y","transparent","rotation-x","position-y","meshPhysicalMaterial","opacity","PlaceButton","placeCounter","style","height","width","e","preventDefault","handleClick","GameCanvas","useState","setPlayer","activeCounter","setActiveCounter","shadowMap","length","possibleWins","console","log","j","matchedAround","hasMatched","checkCounter","directions","k","checkWin","App","className","Boolean","location","hostname","match","startApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","cordova","addEventListener"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,mJCKrCC,EAAS,WACb,IAAMC,EAAQC,cAKd,OAJeD,EAAME,OACdC,SAASC,EAAI,IACpBJ,EAAMK,GAAGC,QAAQC,OAAOC,WAAYD,OAAOE,aAEpC,MAGTC,YAAO,CAACC,oBAER,IAgBMC,EAAQ,SAAC,GAWb,IAXkH,IAApGC,EAAmG,EAAnGA,OAAmBC,GAAgF,EAA3FC,UAA2F,EAAhFD,UAAUE,EAAsE,EAAtEA,YAAaC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,WAAYC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAC3FC,EAAMC,mBACNC,EAAQC,YAAU,CACtBC,UAAWb,EAAS,KAAO,IAIzBc,EAAc,CAAC,IAAK,MAAO,IAE3BC,EAAc,GAEVC,EAAI,EAAGA,EAHF,EAGcA,IACzBD,EAAYE,KACZ,kBAAC,EAAD,CAAcC,IAAKF,EAAGG,GAAIH,EAAGF,WAAYA,EAAYM,KAL1C,EAKwDb,UAAWA,EAAWC,aAAcA,EACzFJ,SAAUA,EAAUC,WAAYA,EAAYC,OAAQA,KASpE,OANAe,aAAS,YACsB,MAAzBV,EAAME,UAAUS,OAAiBrB,GAAuC,GAAzBU,EAAME,UAAUS,OAAcrB,IAC/EE,GAAY,MAKd,kBAAC,IAAEoB,KAAH,CACEd,IAAKA,EACLe,aAAYb,EAAME,UAClBY,aAAY,MACTV,IAKHW,EAAc,SAAC,GAYnB,IAZoG,IAAhFP,EAA+E,EAA/EA,GAAIL,EAA2E,EAA3EA,WAAYM,EAA+D,EAA/DA,KAAMb,EAAyD,EAAzDA,UAAWC,EAA8C,EAA9CA,aAAcJ,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OACnFG,EAAMC,mBACRiB,EAAQR,EAGRS,EAAkB,GAEhBjB,EAAQC,YAAU,CACtBiB,MAAOtB,IAAcY,EAAK,MAAQ,SAI5BH,EAAI,EAAGA,EAAIc,KAAKC,MAAMjB,EAAW,IAAMA,EAAW,GAAKM,IAAQJ,IAErEY,EAAgBX,KACd,kBAAC,EAAD,CAAUC,IAAKF,EAAGG,GAAIH,EAAGF,WAAYA,EAAYM,KAAMA,EAAMY,MAAO5B,EAASuB,GAAOX,GAC1EiB,cAA8BC,IAApB9B,EAASe,GAAIH,MAGrC,OACE,kBAAC,IAAEO,KAAH,CACEd,IAAKA,EACLgB,cAAaX,EAAW,GAAG,GAAMA,EAAW,GAAKM,EAAQ,KAAQD,EACjEgB,QAAS,WACP3B,GAAc,GACdH,EAAW,CAACc,EAAIb,IAChBE,EAAaW,KAEdS,EACD,iCAAaQ,OAAO,WAAWC,KAAM,CAAEvB,EAAW,GAAKM,EAAON,EAAW,GAAIA,EAAW,MACxF,kBAAC,IAAEwB,kBAAH,CAAqBF,OAAO,WAAWP,MAAOlB,EAAMkB,MAAOU,WAAW,MAKtEC,EAAU,SAAC,GAA2C,IAA1CrB,EAAyC,EAAzCA,GAAIL,EAAqC,EAArCA,WAAYM,EAAyB,EAAzBA,KAAMY,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvCxB,EAAMC,mBACR+B,EAAQ3B,EAAW,GAAKM,EAAQ,GAChCS,EAAQG,EAAQ,EAAI,SAAW,MAE7BrB,EAAQC,YAAU,CACtB8B,aAAcb,EACdc,EAAGV,EAAqB,IAAOd,EAAhB,KAAsBL,EAAW,GAAK2B,EACrDG,YAAaX,EAAW,EAAI,IAG9B,OACE,kBAAC,IAAEV,KAAH,CACEd,IAAKA,EACLoC,aAAY,KACZC,aAAYnC,EAAMgC,GAElB,sCAAkBP,OAAO,WAAWC,KAAM,CAACI,EAAKA,EAAKA,EAAK,MAC1D,kBAAC,IAAEM,qBAAH,CAAwBX,OAAO,WAAWP,MAAOlB,EAAM+B,aAAcM,QAASrC,EAAMiC,gBAKpFK,EAAc,SAAC,GAA4D,IAA3D/C,EAA0D,EAA1DA,UAAWF,EAA+C,EAA/CA,OAAQG,EAAuC,EAAvCA,YAAaF,EAA0B,EAA1BA,SAAUiD,EAAgB,EAAhBA,aAY9D,OACE,4BAAQ/B,GAAG,eAAegC,MAAO,CAACC,OAAQ,QAASC,MAAO,SAAUlB,QAAS,SAACmB,IAXhF,SAAqBA,GACnBA,EAAEC,iBAEa,GAAZtD,IACDC,GAAWF,GACXG,GAAY,GACZ+C,KAKiFM,CAAYF,KAA/F,UAsGWG,EAlGI,WAAI,MAGOC,oBAAS,GAHhB,mBAGd1D,EAHc,KAGNE,EAHM,OAMWwD,oBAAS,GANpB,mBAMdzD,EANc,KAMJE,EANI,OASOuD,mBAAS,GAThB,mBASdpD,EATc,KASNqD,EATM,OAYWD,mBAAS,CACvC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAbC,mBAYdtD,EAZc,aAiBqBsD,mBAAS,CAAC,EAAEpD,KAjBjC,mBAiBdsD,EAjBc,KAiBCC,EAjBD,OAoBaH,mBAAS,GApBtB,mBAoBdnD,EApBc,KAoBHC,EApBG,KAiFrB,OACI,yBAAKW,GAAG,aACN,kBAAC,IAAD,CAAQ2C,WAAS,GACf,kBAAC,EAAD,MAEA,uCACA,+BAAWxE,SAAU,CAAC,EAAE,EAAE,MAC1B,kBAAC,EAAD,CAAQY,UAAWA,EAAWF,OAAQA,EAAQC,SAAUA,EAAUE,YAAaA,EAAaC,SAAUA,EAC9FC,WAAYwD,EAAkBvD,OAAQA,EAAQC,UAAWA,EAAWC,aAAcA,KAG5F,kBAAC,EAAD,CAAcN,UAAWA,EAAWF,OAAQA,EAAQC,SAAUA,EAAUE,YAAaA,EAAaK,aAAcA,EAClG0C,aAlEpB,WACE9C,EAASwD,EAAc,IAAIxD,EAASwD,EAAc,IAAIG,QAAUH,EAAc,GAC9ED,GAAoB,EAAVrD,GACVuD,EAAiB,CAACtD,GAAqB,EAAVD,IAI/B,WAIE,IAHA,IAAI0D,EAAe,GAGXhD,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACxBiD,QAAQC,IAAR,wBAA6BlD,IAG7B,IAAI,IAAImD,EAAI,EAAGA,EAAI/D,EAASY,GAAG+C,OAAQI,IAAI,CAiBzC,IAdA,IAAIC,EAAgB,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC3DC,GAAa,EACbC,EAAelE,EAASY,GAAGmD,GAC3BI,EAAa,CACfnE,EAASY,GAAGmD,EAAE,GACd/D,EAASY,EAAE,GAAGmD,EAAE,GAChB/D,EAASY,EAAE,GAAGmD,GACd/D,EAASY,EAAE,GAAGmD,EAAE,KAChBA,EAAE,EAAI,IAAY/D,EAASY,GAAGmD,EAAE,KAChCnD,EAAE,EAAI,GAAKmD,EAAE,EAAI,IAAW/D,EAASY,EAAE,GAAGmD,EAAE,KAC5CnD,EAAE,EAAI,IAAYZ,EAASY,EAAE,GAAGmD,KAChCnD,EAAE,EAAI,IAAYZ,EAASY,EAAE,GAAGmD,EAAE,IAG5BK,EAAI,EAAGA,EAAIJ,EAAcL,OAAQS,IACvCJ,EAAcI,GAAKD,EAAWC,IAAMF,EACjCC,EAAWC,IAAMF,IAClBD,GAAa,GAKdA,GACDL,EAAa/C,KAAK,CAChB,MAAUqD,EACV,IAAQtD,EACR,IAAQmD,EACR,WAAeC,KAMvBH,QAAQC,IAAIF,GA/CZS,IA8D8Cd,UAAWA,EAAWrD,OAAQA,EAAQC,UAAWA,EAAWsD,iBAAkBA,MC3NjHa,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BlF,OAAOmF,SAASC,UAEe,UAA7BpF,OAAOmF,SAASC,UAEhBpF,OAAOmF,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAW,WACbC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iBCxHhBhG,OAAOiG,QACNR,SAASS,iBAAiB,cAAeZ,GAAU,GAEnDA,M","file":"static/js/main.4374a3be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useRef, useState } from 'react';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Canvas, extend, useFrame, useThree, useRender } from 'react-three-fiber';\nimport { useSpring, a } from 'react-spring/three';\n\nconst Camera = () => {\n  const three = useThree();\n  const camera = three.camera;\n  camera.position.z = 2.5;\n  three.gl.setSize(window.innerWidth, window.innerHeight);\n\n  return null;\n};\n\nextend({OrbitControls});\n\nconst Controls = () =>{\n  const orbitRef = useRef();\n  const {camera, gl} = useThree();\n\n  useRender(()=>{\n    orbitRef.current.update();\n  });\n\n  return (\n  <orbitControls\n    maxPolarAngle={Math.PI / 2}\n    minPolarAngle={Math.PI / 2}\n    args={[camera, gl.domElement]} \n    ref={orbitRef}/>);\n};\n\nconst Board = ({active, setActive, isMoving, setIsMoving, counters, setCounter, player, activeCol, setActiveCol})=>{\n  const ref = useRef();\n  const props = useSpring({\n    rotationY: active ? 3.15 : 0,\n  });\n\n  // Board Size = [Width, Height, Depth]\n  let dimensions =  [1.5, 1.425, 0.2]\n  let colNum = 7;\n  let colElements = [];\n\n  for(let i = 0; i < colNum; i++){\n    colElements.push(\n    <BoardColumn  key={i} id={i} dimensions={dimensions} cols={colNum} activeCol={activeCol} setActiveCol={setActiveCol}\n                  counters={counters} setCounter={setCounter} player={player}/>)\n  }\n\n  useFrame(()=>{\n    if((props.rotationY.value == 3.15 && isMoving) || (props.rotationY.value == 0 && isMoving)){\n      setIsMoving(false);\n    }\n  });\n\n  return (\n    <a.mesh\n      ref={ref}\n      rotation-y={props.rotationY}\n      position-x={0.025}>\n        {colElements}\n    </a.mesh>\n  )\n}\n\nconst BoardColumn = ({id, dimensions, cols, activeCol, setActiveCol, counters, setCounter, player})=>{\n  const ref = useRef();\n  let colId = id;\n\n  // Array of Counter components.\n  let counterElements = [];\n\n  const props = useSpring({\n    color: activeCol === id ? \"red\" : \"grey\",\n  });\n\n\n  for(let i = 0; i < Math.floor(dimensions[1] / (dimensions[0] / cols)); i++){\n    // console.log(counters[colId][i]);\n    counterElements.push(\n      <Counter  key={i} id={i} dimensions={dimensions} cols={cols} owner={counters[colId][i]}\n                isPlaced={counters[id][i] !== undefined}/>);\n  }\n\n  return (\n    <a.mesh\n      ref={ref}\n      position-x={-dimensions[0]/2 + ((dimensions[0] / cols) + 0.02) * id }\n      onClick={()=>{\n        setActiveCol(-1);\n        setCounter([id, player]);\n        setActiveCol(id);\n      }}>\n      {counterElements}\n      <boxGeometry attach=\"geometry\" args={[(dimensions[0] / cols), dimensions[1], dimensions[2]]}/>\n      <a.meshBasicMaterial attach=\"material\" color={props.color} wireframe={true}/>\n    </a.mesh>\n  )\n}\n\nconst Counter = ({id, dimensions, cols, owner, isPlaced})=>{\n  const ref = useRef();\n  let size = (dimensions[0] / cols) * 0.5;\n  let color = owner > 0 ? \"yellow\" : \"red\";\n\n  const props = useSpring({\n    counterColor: color,\n    y: isPlaced ? -0.625 + (0.25 * id) : dimensions[1] + size,\n    transparent: isPlaced ? 1 : 0,\n  });\n\n  return (\n    <a.mesh\n      ref={ref}\n      rotation-x={1.55}\n      position-y={props.y}>\n      \n      <cylinderGeometry attach=\"geometry\" args={[size,size,size,10]} />\n      <a.meshPhysicalMaterial attach=\"material\" color={props.counterColor} opacity={props.transparent}/>\n    </a.mesh>\n  )\n}\n\nconst PlaceButton = ({setActive, active, setIsMoving, isMoving, placeCounter})=>{\n\n  function handleClick(e){\n    e.preventDefault();\n\n    if(isMoving == false){\n      setActive(!active);\n      setIsMoving(true);\n      placeCounter();\n    }\n  }\n\n  return(\n    <button id=\"place-button\" style={{height: \"100px\", width: \"100px\"}} onClick={(e)=>{handleClick(e)}}>Click</button>\n  )\n}\n\nconst GameCanvas = ()=>{\n\n  // Toggles rotation of game board\n  const [active, setActive] = useState(false);\n\n  // Prevent clicking to place if Board is moving\n  const [isMoving, setIsMoving] = useState(false);\n\n  // Get & Set active player. 1 = Player One, -1 = Player Two\n  const [player, setPlayer] = useState(1);\n  \n  // Counters in Columns. \n  const [counters, setCounters] = useState([\n    [],[],[],[],[],[],[]\n  ]);\n\n  // Counter to be placed on board. [0] = column index, [1] = owner\n  const [activeCounter, setActiveCounter] = useState([0,player]);\n\n  // Set active column, start at -1 and none selected.\n  const [activeCol, setActiveCol] = useState(0);\n\n  \n\n  /**\n   * Confirm placement of counter & overwrite var.\n   */\n  function placeCounter(){\n    counters[activeCounter[0]][counters[activeCounter[0]].length] = activeCounter[1];\n    setPlayer(player * -1);\n    setActiveCounter([activeCol, player * -1]);\n    checkWin();\n  }\n\n  function checkWin(){\n    let possibleWins = [];\n\n    // Iterate over Columns\n    for(let i = 0; i < 7; i++){\n      console.log(`checking col: ${i}`);\n\n      // Iterate over counters in columns\n      for(let j = 0; j < counters[i].length; j++){\n\n        // Check neighbors [TOP, TOPRIGHT, RIGHT, BOTTOMRIGHT, BOTTOM, BOTTOMLEFT, LEFT, TOPLEFT]\n        let matchedAround = [false,false,false,false,false,false,false,false];\n        let hasMatched = false;\n        let checkCounter = counters[i][j];\n        let directions = [\n          counters[i][j+1], \n          counters[i+1][j+1],\n          counters[i+1][j], \n          counters[i+1][j-1], \n          j-1 < 0 ? false : counters[i][j-1], \n          i-1 < 0 || j-1 < 0 ? false :counters[i-1][j-1], \n          i-1 < 0 ? false : counters[i-1][j], \n          i-1 < 0 ? false : counters[i-1][j+1]\n        ];\n\n        for(let k = 0; k < matchedAround.length; k++){\n          matchedAround[k] = directions[k] == checkCounter;\n          if(directions[k] == checkCounter){\n            hasMatched = true;\n            \n          }\n        }\n\n        if(hasMatched){\n          possibleWins.push({\n            \"value\" : checkCounter,\n            \"col\" : i,\n            \"row\" : j,\n            \"directions\" : matchedAround\n          });\n        }\n      }\n    }\n\n    console.log(possibleWins);\n  }\n\n  return(\n      <div id=\"game-root\">\n        <Canvas shadowMap>\n          <Camera />\n          \n          <ambientLight/>\n          <spotLight position={[0,5,10]}/>\n          <Board  setActive={setActive} active={active} isMoving={isMoving} setIsMoving={setIsMoving} counters={counters}\n                  setCounter={setActiveCounter} player={player} activeCol={activeCol} setActiveCol={setActiveCol}/>\n          {/* <Controls/> */}\n        </Canvas>\n        <PlaceButton  setActive={setActive} active={active} isMoving={isMoving} setIsMoving={setIsMoving} setActiveCol={setActiveCol}\n                      placeCounter={placeCounter} setPlayer={setPlayer} player={player} activeCol={activeCol} setActiveCounter={setActiveCounter}/>\n      </div>\n  )\n}\n\nexport default GameCanvas;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport GameCanvas from './components/game.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameCanvas/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n    serviceWorker.unregister();\n}\n\nif(window.cordova){\n    document.addEventListener('deviceready', startApp, false);\n} else {\n    startApp();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}