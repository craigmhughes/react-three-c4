{"version":3,"sources":["logo.svg","components/game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Camera","three","useThree","camera","position","z","gl","setSize","window","innerWidth","innerHeight","extend","OrbitControls","Board","active","isMoving","setActive","setIsMoving","counters","setCounter","ref","useRef","props","useSpring","rotationY","dimensions","colElements","useState","activeCol","setActiveCol","i","push","key","id","cols","useFrame","value","mesh","rotation-y","position-x","BoardColumn","counterElements","color","Math","floor","owner","random","isPlaced","undefined","onClick","attach","args","meshBasicMaterial","wireframe","Counter","size","y","transparent","rotation-x","position-y","meshPhysicalMaterial","opacity","PlaceButton","style","height","width","e","preventDefault","handleClick","GameCanvas","setCounters","shadowMap","newCounters","length","console","log","App","className","Boolean","location","hostname","match","startApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","cordova","addEventListener"],"mappings":"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","file":"static/js/main.81da3aa3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useRef, useState } from 'react';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Canvas, extend, useFrame, useThree, useRender } from 'react-three-fiber';\nimport { useSpring, a } from 'react-spring/three';\n\nconst Camera = () => {\n  const three = useThree();\n  const camera = three.camera;\n  camera.position.z = 2.5;\n  three.gl.setSize(window.innerWidth, window.innerHeight);\n\n  return null;\n};\n\nextend({OrbitControls});\n\nconst Controls = () =>{\n  const orbitRef = useRef();\n  const {camera, gl} = useThree();\n\n  useRender(()=>{\n    orbitRef.current.update();\n  });\n\n  return (\n  <orbitControls\n    maxPolarAngle={Math.PI / 2}\n    minPolarAngle={Math.PI / 2}\n    args={[camera, gl.domElement]} \n    ref={orbitRef}/>);\n};\n\nconst Board = ({active, setActive, isMoving, setIsMoving, counters, setCounter})=>{\n  const ref = useRef();\n  const props = useSpring({\n    rotationY: active ? 3.15 : 0,\n  });\n\n  // Board Size = [Width, Height, Depth]\n  let dimensions =  [1.5, 1.425, 0.2]\n  let colNum = 7;\n  let colElements = [];\n\n  // Set active column, start at -1 and none selected.\n  const [activeCol, setActiveCol] = useState(-1);\n\n  for(let i = 0; i < colNum; i++){\n    colElements.push(\n    <BoardColumn  key={i} id={i} dimensions={dimensions} cols={colNum} activeCol={activeCol} setActiveCol={setActiveCol}\n                  counters={counters} setCounter={setCounter}/>)\n  }\n\n  useFrame(()=>{\n    if((props.rotationY.value == 3.15 && isMoving) || (props.rotationY.value == 0 && isMoving)){\n      setIsMoving(false);\n    }\n  });\n\n  return (\n    <a.mesh\n      ref={ref}\n      rotation-y={props.rotationY}\n      position-x={0.025}>\n        {colElements}\n    </a.mesh>\n  )\n}\n\nconst BoardColumn = ({id, dimensions, cols, activeCol, setActiveCol, counters, setCounter})=>{\n  const ref = useRef();\n  let placedCounters = 0;\n\n  // Array of Counter components.\n  let counterElements = [];\n\n  const props = useSpring({\n    color: activeCol === id ? \"red\" : \"grey\",\n  });\n\n  for(let i = 0; i < Math.floor(dimensions[1] / (dimensions[0] / cols)); i++){\n    counterElements.push(\n      <Counter  key={i} id={i} dimensions={dimensions} cols={cols} owner={Math.random() * 2}\n                isPlaced={counters[id][i] !== undefined}/>);\n  }\n\n  return (\n    <a.mesh\n      ref={ref}\n      position-x={-dimensions[0]/2 + ((dimensions[0] / cols) + 0.02) * id }\n      onClick={()=>{\n        setActiveCol(-1);\n        setCounter(id, 0);\n        setActiveCol(id);\n      }}>\n      {counterElements}\n      <boxGeometry attach=\"geometry\" args={[(dimensions[0] / cols), dimensions[1], dimensions[2]]}/>\n      <a.meshBasicMaterial attach=\"material\" color={props.color} wireframe={true}/>\n    </a.mesh>\n  )\n}\n\nconst Counter = ({id, dimensions, cols, owner, isPlaced})=>{\n  const ref = useRef();\n  let size = (dimensions[0] / cols) * 0.5;\n  const props = useSpring({\n    color: \"red\",\n    y: isPlaced ? -0.625 + (0.25 * id) : dimensions[1] + size,\n    transparent: isPlaced ? 1 : 0,\n  });\n\n  return (\n    <a.mesh\n      ref={ref}\n      rotation-x={1.55}\n      position-y={props.y}>\n      \n      <cylinderGeometry attach=\"geometry\" args={[size,size,size,10]} />\n      <a.meshPhysicalMaterial attach=\"material\" color={props.color} opacity={props.transparent}/>\n    </a.mesh>\n  )\n}\n\nconst PlaceButton = ({setActive, active, setIsMoving, isMoving})=>{\n\n  function handleClick(e){\n    e.preventDefault();\n\n    if(isMoving == false){\n      setActive(!active);\n      setIsMoving(true);\n    }\n  }\n\n  return(\n    <button id=\"place-button\" style={{height: \"100px\", width: \"100px\"}} onClick={(e)=>{handleClick(e)}}>Click</button>\n  )\n}\n\nconst GameCanvas = ()=>{\n\n  // Toggles rotation of game board\n  const [active, setActive] = useState(false);\n\n  // Prevent clicking to place if Board is moving\n  const [isMoving, setIsMoving] = useState(false);\n\n  // Get & Set active player. true = Player One\n  const [player, setPlayer] = useState(false);\n  \n  // Counters in Columns. \n  const [counters, setCounters] = useState([\n    [],[],[],[],[],[],[]\n  ]);\n\n  /**\n   * Add to counters array.\n   * @param {*} i = column index\n   * @param {*} owner = player\n   */\n  function setCounter(i, owner){\n    let newCounters = counters;\n    newCounters[i][newCounters[i].length] = owner;\n    setCounters(newCounters);\n    console.log(\"set\");\n  }\n\n  return(\n      <div id=\"game-root\">\n        <Canvas shadowMap>\n          <Camera />\n          \n          <ambientLight/>\n          <spotLight position={[0,5,10]}/>\n          <Board  setActive={setActive} active={active} isMoving={isMoving} setIsMoving={setIsMoving} counters={counters}\n                  setCounter={setCounter}/>\n          {/* <Controls/> */}\n        </Canvas>\n        <PlaceButton setActive={setActive} active={active} isMoving={isMoving} setIsMoving={setIsMoving}/>\n      </div>\n  )\n}\n\nexport default GameCanvas;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport GameCanvas from './components/game.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameCanvas/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n    serviceWorker.unregister();\n}\n\nif(window.cordova){\n    document.addEventListener('deviceready', startApp, false);\n} else {\n    startApp();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}